#!/bin/bash
#
# USAGE: sd-update DEVICE
#   DEVICE is the actual device node at /dev/DEVICE
#
# This script is responsible for mounting inserted thumbdrives, then checking 
# for the existence of an update package, and finally extracting and running the
# update script if it exists.

DEVICE=$1

# check input
if [ -z "$DEVICE" ]; then
   exit 1
fi

# test that this device isn't already mounted
device_is_mounted=`grep ${DEVICE} /etc/mtab`
if [ -n "$device_is_mounted" ]; then
   echo "error: seems /dev/${DEVICE} is already mounted"
   exit 1
fi

echo "Getting device information"
# pull in useful variables from vol_id, quote everything Just In Case
eval `/sbin/blkid -o export /dev/${DEVICE} | sed 's/^/export /; s/=/="/; s/$/"/'`

if [ -z "$LABEL" ] || [ -z "$TYPE" ]; then
   echo "error: LABEL is empty! did blkid break? tried /dev/${DEVICE}"
   exit 1
fi

echo "Testing mountpoint"
# test mountpoint - it shouldn't exist
if [ ! -e "/media/${LABEL}" ]; then
    
    echo "Making mountpoint"
    # make the mountpoint
    mkdir "/media/${LABEL}"
    
    echo "Mounting"
    # mount the device
    # 
    # If expecting thumbdrives, you probably want 
    #      mount -t auto -o sync,noatime [...]
    # 
    # If drive is VFAT/NFTS, this mounts the filesystem such that all files
    # are owned by a std user instead of by root.  Change to your user's UID
    # (listed in /etc/passwd).  You may also want "gid=1000" and/or "umask=022", eg:
    #      mount -t auto -o uid=1000,gid=1000 [...]
    # 
    # 
    case "$TYPE" in

        vfat)   mount -t vfat -o sync,noatime,uid=1000 /dev/${DEVICE} "/media/${LABEL}"
                ;;

                # I like the locale setting for ntfs
        ntfs)   mount -t auto -o sync,noatime,uid=1000,locale=en_US.UTF-8 /dev/${DEVICE} "/media/${LABEL}"
                ;;

                # ext2/3/4 don't like uid option
        ext*)   mount -t auto -o sync,noatime /dev/${DEVICE} "/media/${LABEL}"
                ;;
    esac
   
    # Check for the presense of an update file
    UPDATE_FILE=`ls -Cr /media/${LABEL}/update-*.tar.gz | head -n 1`
    DATE=`expr match "$UPDATE_FILE" '.*/update-\([0-9]\{8\}\).tar.gz'`
    
    echo "Checking for update file"
    
    if [ ! -z "$UPDATE_FILE" -a -f "${UPDATE_FILE}" ]; then
        # Our update file exists. Let's make a new directory and copy it
        echo "Found update file. Setting date and extracting"
        # Changing the date prevents warnings when we extract the tar file
        #  Also, some scripts may error out if the last modified date is greater
        #  than the current date. This gets around that.
        LAST_MOD=`state -c %Y ${UPDATE_FILE}`
        sudo date -s "@`expr $LAST_MOD + 1`"
        sudo -u pi mkdir /tmp/update-${DATE}
        #cp ${UPDATE_FILE} /tmp/update-${DATE}
        
        # We don't need to use a wildcard here, but it doesn't hurt
        sudo -u pi tar -C /tmp/update-${DATE} -xf ${UPDATE_FILE}
        
        echo "Checking for update script"
        if [ -f "/tmp/update-${DATE}/update.sh" ]; then
            # Save our working directory
            WD=`pwd`
            # Move to work in the update script's directory
            cd /tmp/update-${DATE}
            
            echo "Running update script"
            # Need to create update log and chmod it first, so Pi can write to it
            touch /tmp/update-log
            chmod 777 /tmp/update-log
            # Run the update script
            # TODO: Allow the script to run as Pi, and sudo commands that need it
            # (Currently not possible because we extract the tar.gz file as root w/o shell)
            sudo -u pi bash ./update.sh > /tmp/update-log 2>&1
            # Move back to old directory
            cd ${WD}
        fi
        
        rm -Rf /tmp/update-${DATE}
    fi
    
    # Unmount the device and remove mountpoint
    # test mountpoint - it should exist
    if [ -e "/media/${LABEL}" ]; then
        
        echo "Unmounting drive" >> /tmp/update-log
        # very naive; just run and pray
        umount "/media/${LABEL}" && rmdir "/media/${LABEL}" && exit 0 >> /tmp/update-log 2>&1
        
        echo "error: /media/${LABEL} failed to unmount."
        exit 1
    fi
fi

echo "Error: Mount point already exists."
exit 1
