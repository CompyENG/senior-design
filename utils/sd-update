#!/bin/bash
#
# USAGE: sd-update DEVICE
#   DEVICE is the actual device node at /dev/DEVICE
#
# This script is responsible for mounting inserted thumbdrives, then checking 
# for the existence of an update package, and finally extracting and running the
# update script if it exists.

DEVICE=$1

# check input
if [ -z "$DEVICE" ]; then
   exit 1
fi

# test that this device isn't already mounted
device_is_mounted=`grep ${DEVICE} /etc/mtab`
if [ -n "$device_is_mounted" ]; then
   echo "error: seems /dev/${DEVICE} is already mounted"
   exit 1
fi

echo "Getting device information"
# pull in useful variables from vol_id, quote everything Just In Case
eval `/sbin/vol_id /dev/${DEVICE} | sed 's/^/export /; s/=/="/; s/$/"/'`

if [ -z "$ID_FS_LABEL" ] || [ -z "$ID_FS_TYPE" ]; then
   echo "error: ID_FS_LABEL is empty! did vol_id break? tried /dev/${DEVICE}"
   exit 1
fi

echo "Testing mountpoint"
# test mountpoint - it shouldn't exist
if [ ! -e "/media/${ID_FS_LABEL}" ]; then
    
    echo "Making mountpoint"
    # make the mountpoint
    mkdir "/media/${ID_FS_LABEL}"
    
    echo "Mounting"
    # mount the device
    # 
    # If expecting thumbdrives, you probably want 
    #      mount -t auto -o sync,noatime [...]
    # 
    # If drive is VFAT/NFTS, this mounts the filesystem such that all files
    # are owned by a std user instead of by root.  Change to your user's UID
    # (listed in /etc/passwd).  You may also want "gid=1000" and/or "umask=022", eg:
    #      mount -t auto -o uid=1000,gid=1000 [...]
    # 
    # 
    case "$ID_FS_TYPE" in

        vfat)   mount -t vfat -o sync,noatime,uid=1000 /dev/${DEVICE} "/media/${ID_FS_LABEL}"
                ;;

                # I like the locale setting for ntfs
        ntfs)   mount -t auto -o sync,noatime,uid=1000,locale=en_US.UTF-8 /dev/${DEVICE} "/media/${ID_FS_LABEL}"
                ;;

                # ext2/3/4 don't like uid option
        ext*)   mount -t auto -o sync,noatime /dev/${DEVICE} "/media/${ID_FS_LABEL}"
                ;;
    esac
   
    # Check for the presense of an update file
    # TODO: No reason to limit this to today's date. Let's check for all dates,
    #  sort and select the newest
    DATE=`date "+%Y%m%d"`
    
    echo "Checking for update file"
    if [ -f "/media/${ID_FS_LABEL}/update-${DATE}.tar.gz" ]; then
        # Our update file exists. Let's make a new directory and copy it
        echo "Found update file. Extracting"
        mkdir /tmp/update-${DATE}
        cp /media/${ID_FS_LABEL}/update-${DATE}.tar.gz
        
        tar xvf /media/${ID_FS_LABEL}/update-${DATE}.tar.gz
        
        echo "Checking for update script"
        if [ -f "/tmp/update-${DATE}/update.sh" ]; then
            # Save our working directory
            WD=`pwd`
            # Move to work in the update script's directory
            cd /tmp/update-${DATE}
            
            echo "Running update script"
            # Run the update script
            bash /tmp/update-${DATE}/update.sh
            # Move back to old directory
            cd ${WD}
        fi
    fi
    
    # Unmount the device and remove mountpoint
    # test mountpoint - it should exist
    if [ -e "/media/${ID_FS_LABEL}" ]; then
        
        echo "Unmounting drive"
        # very naive; just run and pray
        umount -l "/media/${ID_FS_LABEL}" && rmdir "/media/${ID_FS_LABEL}" && exit 0
        
        echo "error: /media/${ID_FS_LABEL} failed to unmount."
        exit 1
    fi
fi

echo "Error: Mount point already exists."
exit 1
